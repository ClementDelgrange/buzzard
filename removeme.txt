ack '^class' _actors | ack -v 'Footprint'+ | ack -v 'pool_job' | ack -v 'Msg' | ack -v 'class _' | ack -v '\b(Wait|Work)\b'



Inter raster optimisation
Inter raster query optimisation

** ************************************************************************** **
** ************************************************************************** **

BackCachedRaster

# all (gdalfile, nocache, cache) ***************************
5       __len__
3ou4    dtype
9       nodata
3       fp
6       build_sampling_footprint_to_remap_interpolate
1       sr

3+16    uid (ctor)
3       resample_pool (ctor param)
2       max_resampling_size (ctor param)
1       create_actors (pure)
1       queue_data (pure)

# nocache, cache *******************************************
2       facade_proxy (ctor param)
3       computation_pool (ctor param)
3       merge_pool (ctor param)
2       compute_array (ctor param)
2       merge_arrays (ctor param)
1       primitives_back (ctor param)
1       primitives_kwargs (ctor param)
1       convert_footprint_per_primitive (build_primitive_footprints) (ctor param)

# cache ****************************************************
2       cache_dir
1       cache_fps
2       cache_fps_of_fp() (should be same grid)
2       compute_fps_of_cache_fp[] (should be a dict in the background)
1       cache_fps_of_compute_fp[] (should be a dict in the background)
2       fname_prefix_of_cache_fp() (move out of `cache_supervisor`)
6       io_pool (ctor)

# nocache **************************************************
?       remap_in_primitives
?       max_computation_size

# gdalfile ************************************************
6       io_pool

# none *****************************************************
0       new_queries
0       lock
0       indices_of_cache_fp

# *********************************************************************************************** **
# *********************************************************************************************** **


   ************************************************************************** **
** TODO
** ************************************************************************** **


- Get CachedRasterRecipe.queue_data to work on really basic unit test
- Get NocacheRasterRecipe.queue_data to work on really basic unit test
- Get GDALScheduledFileRaster to work on really basic unit test
- Create debug callbacks and then: create unit tests, create dashboard
- Create examples
- Create PR


```
basic
direct
nocache
```


# Step 1 - Faire marcher
- Finish writing actors for cached recipes
    - Priorities classes (update xml graph)
    - Production pipeline
    - Caching pipeline
- Scheduler
    - DataSource Back mixin
    - Schedule class
    - Raster back class/mixin
- DataSource method/class-facade
- Worker functions


# Step 2 - Uncached recipes
- Not cached recipes
    - Make shared actors use polymorphism
    - Not cached actors



# Step 3 - Debug callbacks
- Exception handling, assertions/RuntimeError VS ValueError
- Debug callbacks injections
- Debugging with dashboard / Unit testings
